from libqtile import bar, layout, widget, hook, qtile
from qtilecolors import colors  # noqa
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
import re
import os
import subprocess


###################################
#   C O L O R S   &   F O N T S   #
###################################


# Get colors generated by pywal
background_color = colors[0]
foreground_color = colors[8]
primary_color = colors[12]
secondary_color = colors[5]
accent_color = colors[9]
highlight_color = colors[3]
success_color = colors[2]

# Bar background colors
bar_background_black = "#292929"
bar_background_gray = "#3D3D3D"

# Font
font_normal = "JetBrainsMono Nerd Font"
font_bold = "JetBrainsMono Nerd Font Bold"
font_italic = "JetBrainsMono Nerd Font Italic"

#############################
#   K E Y B I N D I N G S   #
#############################


mod = "mod4"

keys = [
    # Movimiento de enfoque (Focus)
    Key([mod], "h", lazy.layout.left(), desc="Focus left"),
    Key([mod], "Left", lazy.layout.left(), desc="Focus left"),
    Key([mod], "l", lazy.layout.right(), desc="Focus right"),
    Key([mod], "Right", lazy.layout.right(), desc="Focus right"),
    Key([mod], "j", lazy.layout.down(), desc="Focus down"),
    Key([mod], "Down", lazy.layout.down(), desc="Focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Focus up"),
    Key([mod], "Up", lazy.layout.up(), desc="Focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Focus next window"),
    # Movimiento de ventanas (Shuffle)
    Key([mod, "control"], "h", lazy.layout.shuffle_left(), desc="Move window left"),
    Key([mod, "control"], "Left", lazy.layout.shuffle_left(), desc="Move window left"),
    Key([mod, "control"], "l", lazy.layout.shuffle_right(), desc="Move window right"),
    Key([mod, "control"], "Right", lazy.layout.shuffle_right(), desc="Move window right"),
    Key([mod, "control"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "control"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "control"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    Key([mod, "control"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
    # Redimensionar ventanas (Grow)
    Key([mod, "shift"], "h", lazy.layout.grow_left(), desc="Grow window left"),
    Key([mod, "shift"], "Left", lazy.layout.grow_left(), desc="Grow window left"),
    Key([mod, "shift"], "l", lazy.layout.grow_right(), desc="Grow window right"),
    Key([mod, "shift"], "Right", lazy.layout.grow_right(), desc="Grow window right"),
    Key([mod, "shift"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "shift"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "shift"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod, "shift"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod, "shift"], "n", lazy.layout.normalize(), desc="Normalize window size"),
    # Group management
    Key([mod], "Tab", lazy.screen.next_group(), desc="Group switch"),
    Key([mod, "shift"], "Tab", lazy.screen.prev_group(), desc="Inverse group switch"),
    Key([mod], "z", lazy.screen.toggle_group(), desc="Toggle between groups"),
    # Acciones de ventana
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen"),
    Key([mod, "shift"], "f", lazy.window.toggle_floating(), desc="Toggle floating"),
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Toggle split/unsplit"),
    Key([mod], "c", lazy.window.kill(), desc="Close focused window"),
    # Lanzadores y programas
    Key([mod], "Return", lazy.spawn("alacritty"), desc="Launch terminal"),
    Key([mod], "a", lazy.spawn("sh -c ~/.config/rofi/scripts/launcher"), desc="App launcher"),
    Key([mod], "p", lazy.spawn("sh -c ~/.config/rofi/scripts/power"), desc="Power menu"),
    Key([mod], "i", lazy.spawn("sh -c ~/.config/rofi/scripts/theme_switcher"), desc="Theme switcher"),
    Key([mod], "b", lazy.spawn("firefox"), desc="Firefox browser"),
    Key([mod], "r", lazy.spawn("alacritty --class ranger -e ranger"), desc="Ranger file manager"),
    Key([mod], "m", lazy.spawn("alacritty --class btop -e btop"), desc="Btop system monitor"),
    Key([mod], "e", lazy.spawn("thunar"), desc="Thunar File manager"),
    Key([mod], "s", lazy.spawn("flameshot screen"), desc="Screenshot"),
    Key([mod, "shift"], "s", lazy.spawn("flameshot gui"), desc="Screenshot"),
    # Configuración general
    Key([mod], "x", lazy.next_layout(), desc="Next layout"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    # Multimedia
    Key([], "XF86AudioRaiseVolume", lazy.spawn("sh -c 'pactl set-sink-volume 0 +5% && ~/.config/dunst/scripts/volume.sh'"), desc="Volume up"),
    Key([], "XF86AudioLowerVolume", lazy.spawn("sh -c 'pactl set-sink-volume 0 -5% && ~/.config/dunst/scripts/volume.sh'"),desc="Volume down"),
    Key([], "XF86AudioMute", lazy.spawn("sh -c 'pulsemixer --toggle-mute && ~/.config/dunst/scripts/volume.sh'"),desc="Toggle mute"),
    Key([], "XF86AudioPlay", lazy.spawn("playerctl play-pause"), desc="Play/Pause"),
    Key([], "XF86AudioPrev", lazy.spawn("playerctl previous"), desc="Previous track"),
    Key([], "XF86AudioNext", lazy.spawn("playerctl next"), desc="Next track"),
    Key([], "XF86MonBrightnessUp", lazy.spawn("sh -c 'brightnessctl s 10%+ && ~/.config/dunst/scripts/brightness.sh screen'"), desc="Brightness up"),
    Key([], "XF86MonBrightnessDown", lazy.spawn("sh -c 'brightnessctl s 10%- && ~/.config/dunst/scripts/brightness.sh screen'"),desc="Brightness down"),
    Key([mod], "o", lazy.spawn("sh -c ~/.config/lazywal/scripts/show_help.sh"), desc="Mostrar ayuda de keybindings"),
    Key([mod], "n", lazy.spawn("sh -c ~/.config/rofi/scripts/wifi"), desc="Wifi menu"),
    Key([mod], "v", lazy.spawn("sh -c ~/.config/rofi/scripts/history_clip"), desc="History clipboard menu"),
    Key([mod], "Print", lazy.spawn("flameshot full -p ~/Pictures/screenshots"), desc="Screenshot fullscreen"),
]

###########################
#   A P P S   R U L E S   #
###########################


# In Terminal command: "xprop | grep WM_CLASS" to get the WM_CLASS of a window
app_rules = [
    {"wm_class": re.compile(r"^firefox$"), "group": "1", "float": False},
    {"wm_class": re.compile(r"^(Spotify|spotify)$"), "group": "8", "float": False},
    {
        "wm_class": re.compile(r"^(thunar|gpick|wpg|mousepad|btop|ranger)$"),
        "group": None,
        "float": True,
    },
]

###################
#   G R O U P S   #
###################


groups = [Group(f"{i + 1}", label="") for i in range(8)]

for i in groups:
    keys.extend(
        [
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
        ]
    )

#####################
#   L A Y O U T S   #
#####################


lay_config = {
    "border_width": 0,
    "margin": 9,
    "border_focus": bar_background_gray,
    "border_normal": bar_background_gray,
    "font": "FiraCode Nerd Font",
    "grow_amount": 2,
}

layouts = [
    layout.Bsp(**lay_config, fair=False, border_on_single=True),
    layout.Columns(
        **lay_config,
        border_on_single=True,
        num_columns=2,
        split=False,
    ),
    layout.Floating(**lay_config),
    layout.Max(**lay_config),
]

widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = [widget_defaults.copy()]


def search():
    qtile.spawn("sh -c ~/.config/rofi/scripts/launcher")


def power():
    qtile.spawn("sh -c ~/.config/rofi/scripts/power")


#############
#   B A R   #
#############


screens = [
    Screen(
        top=bar.Bar(
            [
                widget.Spacer(
                    length=15,
                    background=bar_background_black,
                ),
                widget.TextBox(
                    text="󰣇 ",
                    font="JetBrainsMono Nerd Font",
                    fontsize=20,
                    background=bar_background_black,
                    foreground=primary_color,
                    mouse_callbacks={"Button1": power},
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/6.png",
                ),
                widget.GroupBox(
                    font="JetBrainsMono Nerd Font",
                    fontsize=13,
                    borderwidth=3,
                    highlight_method="block",
                    active=primary_color,
                    block_highlight_text_color=accent_color,
                    highlight_color=highlight_color,
                    inactive=bar_background_black,
                    foreground=foreground_color,
                    background=bar_background_gray,
                    this_current_screen_border=bar_background_gray,
                    this_screen_border=bar_background_gray,
                    other_current_screen_border=bar_background_gray,
                    other_screen_border=bar_background_gray,
                    urgent_border=bar_background_gray,
                    rounded=True,
                    disable_drag=True,
                ),
                widget.Spacer(
                    length=8,
                    background=bar_background_gray,
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/1.png",
                ),
                widget.CurrentLayoutIcon(
                    background=bar_background_gray,
                    custom_icon_paths=["~/.config/qtile/Assets/layout"],
                    scale=0.40,
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/5.png",
                ),
                widget.TextBox(
                    text=" ",
                    font="JetBrainsMono Nerd Font",
                    fontsize=13,
                    background=bar_background_black,
                    foreground=primary_color,
                    mouse_callbacks={"Button1": search},
                ),
                widget.TextBox(
                    fmt="Search",
                    background=bar_background_black,
                    font="JetBrainsMono Nerd Font Bold",
                    fontsize=13,
                    foreground=accent_color,
                    mouse_callbacks={"Button1": search},
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/4.png",
                ),
                widget.WindowName(
                    background=bar_background_gray,
                    foreground=accent_color,
                    font="JetBrainsMono Nerd Font Bold",
                    fontsize=13,
                    empty_group_string="Desktop",
                    for_current_screen=True,
                    max_chars=50,
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/3.png",
                ),
                widget.Systray(
                    background=bar_background_black,
                    fontsize=2,
                ),
                widget.TextBox(
                    text=" ",
                    background=bar_background_black,
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/6.png",
                    background=bar_background_gray,
                ),
                widget.TextBox(
                    text=" ",
                    font="JetBrainsMono Nerd Font",
                    fontsize=13,
                    background=bar_background_gray,
                    foreground=primary_color,
                ),
                widget.Memory(
                    background=bar_background_gray,
                    format="{MemUsed: .0f}{mm}",
                    foreground=accent_color,
                    font="JetBrainsMono Nerd Font Bold",
                    fontsize=13,
                    update_interval=5,
                    mouse_callbacks={
                        "Button1": lambda: qtile.cmd_spawn(
                            "alacritty --class btop -e btop"
                        )
                    },
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/2.png",
                ),
                widget.Spacer(
                    length=8,
                    background=bar_background_gray,
                ),
                widget.BatteryIcon(
                    background=bar_background_gray,
                    scale=1.4,
                    theme_path="~/.config/qtile/Assets/battery",
                ),
                widget.Battery(
                    font="JetBrainsMono Nerd Font Bold",
                    fontsize=13,
                    background=bar_background_gray,
                    foreground=accent_color,
                    format="{char} {percent:2.0%}",
                    show_short_text=False,
                    charge_char="",
                    discharge_char="",
                    not_charging_char="",
                    empty_char="",
                    full_char="",
                    unknown_char="",
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/2.png",
                ),
                widget.Spacer(
                    length=8,
                    background=bar_background_gray,
                ),
                widget.PulseVolume(
                    font="JetBrainsMono Nerd Font",
                    fontsize=13,
                    background=bar_background_gray,
                    foreground=accent_color,
                    fmt="{}",
                    mute_format=" 󰖁 0 ",
                    unmute_format="  {volume}",
                    mute_foreground=accent_color,
                    step=5,
                    emoji=False,
                    device="default",
                ),
                widget.Image(
                    filename="~/.config/qtile/Assets/5.png",
                    background=bar_background_gray,
                ),
                widget.TextBox(
                    text=" ",
                    font="JetBrainsMono Nerd Font",
                    fontsize=13,
                    background=bar_background_black,
                    foreground=primary_color,
                ),
                widget.Clock(
                    format="%I:%M %p",
                    background=bar_background_black,
                    foreground=accent_color,
                    font="JetBrainsMono Nerd Font Bold",
                    fontsize=13,
                ),
                widget.Spacer(
                    length=18,
                    background=bar_background_black,
                ),
            ],
            30,
            border_color=bar_background_black,
            border_width=[0, 0, 0, 0],
            margin=[15, 60, 6, 60],
        ),
    ),
]

###################################
#   M O U S E   B I N D I N G S   #
###################################


mouse = [
    Drag(
        [mod],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()
    ),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

#################
#   H O O K S   #
#################


@hook.subscribe.client_new
def assign_app_group(client):
    for rule in app_rules:
        if client.match(Match(wm_class=rule["wm_class"])):
            if rule.get("group") is not None:
                client.togroup(rule["group"])
            if rule.get("float", False):
                client.floating = True
            break


@hook.subscribe.startup_once
def autostart():
    subprocess.call([os.path.expanduser(".config/qtile/autostart_once.sh")])


###################################
#   F l o a t i n g   R u l e s   #
###################################


dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    border_focus=bar_background_black,
    border_normal=bar_background_black,
    border_width=0,
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ],
)


#################
#   S T U F F   #
#################


auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True
wl_input_rules = None
wmname = "LG3D"

# EOF
